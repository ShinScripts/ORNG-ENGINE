7/8/23:
-CMake build updated and fixed
-Some scene loading bugs fixed and stability improvements


5/8/23:
-Events system changes
-Multiple active scene support
-Optimizations to physics/transform events
-Portal shader for fun

30/7/23:
-Editor bugfixing
-Assets now compiled into the core engine lib instead of needing to be in every project using it


28/7/23:
-ECS Overhaul - started using entt and event-driven architecture
-Made core engine API a library and seperated editor application from it
-Events system converted to using entt
-Fixed spotlight/pointlight shadows
-PCSS for directional lights
-Bloom post processing added - http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare
-Emissive materials and texture support
-Stability improvements, a few crashes (especially on window close) fixed


14/7/23:
-Blurring/upsampling fog passes converted to compute shaders, ~0.5ms performance gain
-Proper windows file explorer integration
-Skybox/env map editor (for now just an HDR loader)
-Editor bugfixing, more QOL features
-Smoother shadows with rotated poisson disk sampling
-GPU/CPU lifetime profiling timer macros

08/7/23:
-Huge fog improvements, depth-aware upsampling and blurring, decent performance
-Improvements on serialization, almost all data saved (some stuff that's about to change not included)
-GPU-driven physics (actually a bit slower, but needed for dynamic triangle meshes)
-Triangle mesh support, static and dynamic
-Some multi-entity selection utils
-Physics component refactoring (had no idea PxRigidActor existed)


04/7/23:
-Basic scene serialization/deserialization (not fully complete)
-Removed material buffer system, replaced with much better method
-More deletion/creation functionality - still not complete
-Entity duplication keybind
-Proper env map loader class seperate from skybox

27/6/23:
-Nvidia physx and basic physics components implemented (still needs work)
-Small changes to ECS and transform callbacks
-Textures automatically use mipmaps
-Further UI improvements
-Texture tiling control in materials
-General bugfixing and refactoring

24/6/23:
-Large UI changes
-Fixed some transform bugs
-Material bugs fixed
-Light buffer updates slightly changed - for now just update each frame
-Changes to diffuse prefilter system so env map data is saved to disk

22/6/23:
-Image based lighting with environment map loading and prefiltering
-Component managers (systems)
-Transform inheritance
-Material system rewrites to make swapping materials easier
-Some texture rewrites
-General refactoring

13/6/23:
-Moved from blinn-phong shading to PBR pipeline
-Parallax mapping with displacement maps
-Safe automatic texture loading
-Material editing UI improvements, basic drag and drop
-Removed stacking components for entities, space only given to active components, none reserved
-Material id's swapped for pointers in mesh comps and instance groups
-Other minor refactoring

10/6/23:
-Custom editor camera 
-Camera component added
-Window resize events with framebuffer connections
-Frame timestep fixed
-Automatic event listener unregistration
-Refactoring


7/6/23:
-Engine events system
-Basic terrain configuration and regeneration
-Gizmos for transforming meshes using ImGuizmo
-Scene renderer
-Basic material editing
-Basic HDR implemented (no luminance maps yet)
-Atmospheric scattering in fog
-All lights work with volumetric fog
-Fog optimizations (looks terrible currently, need depth-aware upsampling)
-Fixed spotlight shadows
-Modified render pipeline to support post-lighting passes using a shared depth buffer
-Shared framebuffer textures
-Switched to column-major matrix standard
-Adjustments to debug editor UI
-General refactoring

17/5/23:
-Volumetric fog
-Fog controls
-Made textures and framebuffers work more nicely together
-Switched from GLCall to more modern debug message callback for opengl debugging.
-Switched to deferred rendering pipeline
-Modular materials, can be changed on meshes now
-More transform buffer optimizations, moved to ssbos, ~5x increased performance on many moving objects
-Fixed dreadful activateprogram function which was re-linking the program every time it was called (400 to 1400fps in some areas)


24/4/23:
-Basic Entity editor
-Very underdeveloped asset viewer/editor
-ECS improvements
-Entity selection through mouse picking
-Native scripting
-Rewrote shader, shaderlibrary, framebuffer and framebufferlibrary apis to make them actually usable
-AABB generation for meshes
-Texture generation more customizable
-Lighting shader optimizations (reduced branching)
-Optimizations to transform buffer code, moving components much faster
-CMake integration
-Linked most dependencies as submodules, every library also now static
-Reduced build times with precompiled headers
-Other things

9/4/23:
-Terrain texture blending
-Quadtree based dynamic terrain LOD
-Asynchronous terrain chunk loading system
-Frustum culling for terrain
-Optimizations to reduce build times
-Fixed lighting bug caused by calculating lighting only in tangent space without normal maps provided

01/4/23:
-Very basic layer system added (currently only an editor layer)


30/3/23:
-Fog method (https://cs.gmu.edu/~jchen/cs662/fog.pdf) implemented
-Normal mapping added
-Multiple camera support
-Better logging using spdlog
-Further improvements/changes to codebase structure

23/3/23:
-Procedural terrain generation using perlin noise
-General refactoring, structural changes to codebase
-Timestep has more functionality, supports different units
-Switched ECS back to pointer system, easier to work with

26/3/23:
-Basic non-procedural terrain generation, a few modifiable parameters
-Added auto-generated mipmaps to textures (this also fixes some black texture bugs)

25/3/23:
-Fixed shadow flickering bug when directional light was moved caused by updating the depth map too late

22/3/23:
Fixed diffuse colour bug caused by reading the specular colour instead of the diffuse colour from materials

19/3/23:
-Split spotlight and directional light textures and framebuffers for more performant resolutions for different light types
-PCF shadow softening
-Added scene debug data GUI window
-Fixed memory crash caused by referencing deleted mesh components

18/3/23:
-Changed ECS to using contiguous memory for performance, this makes creating entities slower but rendering them faster
-SceneEntity class that all scene components derive from to allow entities to have structures with eachother
-Mesh entities with the same mesh data can now properly support different shader types
-ID system for entities
-Lowered resolution of depth maps for spotlights

14/3/23:
-Shadow support for spotlights

13/3/23:
-Reflective shader that reflects skybox
-Skybox optimizations
-More lighting model fixes/changes, reflected light always less than light received, shadow bias depends on slope

12/3/23:
-Directional light controls
-Depth map viewing window
-Changes to shadow map biasing (still not perfect)
-WorldTransform2D added to support 2D entities and windows

11/3/23:
-Changes to Blinn-Phong lighting algorithm to fix ambient lighting issues
-Rough shadow mapping implemented
-Display now drawn to as a textured quad
-Shaders restructured to remove repeated code


9/3/23:
-Switched to UBOs for lights (~30% increased perfomance)
-Switched to UBOs for view/projection matrices.
-Scene entities can now be edited before being loaded


7/3/23:
-Added spotlights with a visualization cone angled with the cameras target vector (needs some work)
-Fixed world matrix bug caused by incorrect multiplication order
-Fixed flat colour shader WVP uniform bug caused by WVP being taken from light instead of its mesh visual


5/3/23:
-Added fixed distance limits for point lights
-Improved multi-shader support for scenes
-Removed render functionality from BasicMesh class
-Added draw call functions to Renderer 
-Fixed black texture issue caused by bad materials